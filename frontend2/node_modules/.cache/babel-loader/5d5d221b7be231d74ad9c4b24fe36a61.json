{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"className\", \"allAutocompletedItemsCount\", \"autocompleteView\", \"isFocused\", \"inputProps\", \"inputView\", \"onChange\", \"onSelectAutocomplete\", \"onSubmit\", \"useAutocomplete\", \"value\", \"autocompletedResults\", \"autocompletedSuggestions\", \"autocompletedSuggestionsCount\", \"completeSuggestion\", \"notifyAutocompleteSelected\"],\n    _excluded2 = [\"className\"],\n    _excluded3 = [\"className\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport Downshift from \"downshift\";\nimport { Result } from \"./types\";\nimport { Suggestion } from \"./types\";\nimport { appendClassName } from \"./view-helpers\";\nimport Autocomplete from \"./Autocomplete\";\nimport SearchInput from \"./SearchInput\";\n\nfunction SearchBox(props) {\n  var className = props.className,\n      allAutocompletedItemsCount = props.allAutocompletedItemsCount,\n      autocompleteView = props.autocompleteView,\n      isFocused = props.isFocused,\n      _props$inputProps = props.inputProps,\n      inputProps = _props$inputProps === void 0 ? {} : _props$inputProps,\n      inputView = props.inputView,\n      onChange = props.onChange,\n      onSelectAutocomplete = props.onSelectAutocomplete,\n      _onSubmit = props.onSubmit,\n      useAutocomplete = props.useAutocomplete,\n      value = props.value,\n      autocompletedResults = props.autocompletedResults,\n      autocompletedSuggestions = props.autocompletedSuggestions,\n      autocompletedSuggestionsCount = props.autocompletedSuggestionsCount,\n      completeSuggestion = props.completeSuggestion,\n      notifyAutocompleteSelected = props.notifyAutocompleteSelected,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var focusedClass = isFocused ? \"focus\" : \"\";\n  var AutocompleteView = autocompleteView || Autocomplete;\n  var InputView = inputView || SearchInput;\n  return /*#__PURE__*/React.createElement(Downshift, _extends({\n    inputValue: value,\n    onChange: onSelectAutocomplete,\n    onInputValueChange: function onInputValueChange(newValue) {\n      // To avoid over dispatching\n      if (value === newValue) return;\n      onChange(newValue);\n    } // Because when a selection is made, we don't really want to change\n    // the inputValue. This is supposed to be a \"controlled\" value, and when\n    // this happens we lose control of it.\n    ,\n    itemToString: function itemToString() {\n      return value;\n    }\n  }, rest), function (downshiftProps) {\n    var closeMenu = downshiftProps.closeMenu,\n        _getInputProps = downshiftProps.getInputProps,\n        isOpen = downshiftProps.isOpen;\n    var autocompleteClass = isOpen === true ? \" autocomplete\" : \"\";\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: function onSubmit(e) {\n        closeMenu();\n\n        _onSubmit(e);\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: appendClassName(\"sui-search-box\", className) + autocompleteClass\n    }, /*#__PURE__*/React.createElement(InputView, _extends({}, downshiftProps, {\n      getInputProps: function getInputProps(additionalProps) {\n        var _ref = additionalProps || {},\n            className = _ref.className,\n            rest = _objectWithoutProperties(_ref, _excluded2);\n\n        return _getInputProps(_objectSpread(_objectSpread({\n          placeholder: \"Search\"\n        }, inputProps), {}, {\n          className: appendClassName(\"sui-search-box__text-input\", [inputProps.className, className, focusedClass])\n        }, rest));\n      },\n      getButtonProps: function getButtonProps(additionalProps) {\n        var _ref2 = additionalProps || {},\n            className = _ref2.className,\n            rest = _objectWithoutProperties(_ref2, _excluded3);\n\n        return _objectSpread({\n          type: \"submit\",\n          value: \"Search\",\n          className: appendClassName(\"button sui-search-box__submit\", className)\n        }, rest);\n      },\n      getAutocomplete: function getAutocomplete() {\n        if (useAutocomplete && isOpen && allAutocompletedItemsCount > 0) {\n          return /*#__PURE__*/React.createElement(AutocompleteView, _extends({}, props, downshiftProps));\n        } else {\n          return null;\n        }\n      }\n    }))));\n  });\n}\n\nSearchBox.propTypes = {\n  // Provided by container\n  allAutocompletedItemsCount: PropTypes.number.isRequired,\n  autocompletedResults: PropTypes.arrayOf(Result).isRequired,\n  autocompletedSuggestions: PropTypes.objectOf(PropTypes.arrayOf(Suggestion)).isRequired,\n  autocompletedSuggestionsCount: PropTypes.number.isRequired,\n  completeSuggestion: PropTypes.func.isRequired,\n  notifyAutocompleteSelected: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n  autocompleteResults: PropTypes.oneOfType([PropTypes.bool, PropTypes.shape({\n    titleField: PropTypes.string.isRequired,\n    urlField: PropTypes.string.isRequired,\n    linkTarget: PropTypes.string,\n    sectionTitle: PropTypes.string\n  })]),\n  autocompleteView: PropTypes.func,\n  autocompleteSuggestions: PropTypes.oneOfType([PropTypes.bool, PropTypes.exact({\n    sectionTitle: PropTypes.string\n  }), PropTypes.objectOf(PropTypes.exact({\n    sectionTitle: PropTypes.string\n  }))]),\n  className: PropTypes.string,\n  inputProps: PropTypes.object,\n  inputView: PropTypes.func,\n  isFocused: PropTypes.bool,\n  useAutocomplete: PropTypes.bool,\n  // Specific configuration for this view only\n  onSelectAutocomplete: PropTypes.func\n};\nexport default SearchBox;","map":null,"metadata":{},"sourceType":"module"}