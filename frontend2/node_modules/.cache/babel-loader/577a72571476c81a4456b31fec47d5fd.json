{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport PropTypes from \"prop-types\";\nimport React, { useState, useEffect } from \"react\";\nimport { SearchDriver } from \"@elastic/search-ui\";\nimport SearchContext from \"./SearchContext\";\nimport defaultA11yMessages from \"./A11yNotifications\";\n/**\n * The SearchProvider primarily holds a reference to the SearchDriver and\n * exposes it to the rest of the application in a Context.\n */\n\nvar SearchProvider = function SearchProvider(_ref) {\n  var children = _ref.children,\n      _ref$config = _ref.config,\n      config = _ref$config === void 0 ? {} : _ref$config,\n      driver = _ref.driver;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      driverInstance = _useState2[0],\n      setDriverInstance = _useState2[1];\n\n  useEffect(function () {\n    // This initialization is done inside of useEffect, because initializing the SearchDriver server side\n    // will error out, since the driver depends on window. Placing the initialization inside of useEffect\n    // assures that it won't attempt to initialize server side.\n    var currentDriver = driver || new SearchDriver(_objectSpread(_objectSpread({}, config), {}, {\n      a11yNotificationMessages: _objectSpread(_objectSpread({}, defaultA11yMessages), config.a11yNotificationMessages)\n    }));\n    setDriverInstance(currentDriver);\n    return function () {\n      currentDriver.tearDown();\n    };\n  }, []); // This effect allows users to dynamically update their searchQuery without re-mounting a SearchProvider,\n  // which would be destructive. An example of why this is useful is dynamically updating facets.\n\n  useEffect(function () {\n    if (driverInstance) {\n      driverInstance.setSearchQuery(config.searchQuery);\n    }\n  }, [config.searchQuery]);\n  useEffect(function () {\n    if (driverInstance) {\n      driverInstance.setAutocompleteQuery(config.autocompleteQuery);\n    }\n  }, [config.autocompleteQuery]); // Since driver is initialized in useEffect above, we are waiting\n  // to render until the driver is available.\n\n  if (!driverInstance) return null; // Passing the entire \"this.state\" to the Context is significant. Because\n  // Context determines when to re-render based on referential identity\n  // something like this could cause unnecessary renders:\n  //\n  // <SearchContext.Provider value={{driver: this.state.driver}}>\n  //\n  // By passing the entire state, we ensure that re-renders only occur when\n  // state is actually updated.\n\n  return /*#__PURE__*/React.createElement(SearchContext.Provider, {\n    value: {\n      driver: driverInstance\n    }\n  }, children);\n};\n\nSearchProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n  // Not providing a shape here because the shape matches the shape of\n  // SearchDriver. SearchDriver can do it's own parameter validation.\n  config: PropTypes.object,\n  driver: PropTypes.object\n};\nexport default SearchProvider;","map":null,"metadata":{},"sourceType":"module"}